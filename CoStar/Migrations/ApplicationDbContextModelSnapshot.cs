// <auto-generated />
using System;
using CoStar.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace CoStar.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("CoStar.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<byte[]>("ApplicationUserImage");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<DateTime>("EnrollDate")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "4516b530-a728-428d-b429-5c4433e55432",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "9187ea44-e262-4de7-8347-c2b6405cf068",
                            Email = "admin@admin.com",
                            EmailConfirmed = true,
                            EnrollDate = new DateTime(2008, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Admin",
                            LastName = "Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@ADMIN.COM",
                            NormalizedUserName = "ADMIN@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAED8cCOSoCrLIZoXZTGLj9ViXc42CigHzcos05mM1k8HnN6oa7Hm+HYchNP8ausB6sQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "db96abf0-ebc4-43f3-b4b3-18772efc2b1c",
                            TwoFactorEnabled = false,
                            UserName = "admin@admin.com"
                        },
                        new
                        {
                            Id = "2b5cb8a2-1d65-4b22-8af7-4a1ac2a5610f",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "4c880e31-f1d6-4f15-9219-01ed0590898d",
                            Email = "guest@admin.com",
                            EmailConfirmed = true,
                            EnrollDate = new DateTime(2010, 11, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "Guest",
                            LastName = "Guest",
                            LockoutEnabled = false,
                            NormalizedEmail = "guest@ADMIN.COM",
                            NormalizedUserName = "GUEST@ADMIN.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEC8iUlCkaCFLVqQleRdj1XShKQiieVAYa+QVlKIqPlYk8gGhCEPrQr8WqapJ7r86Yw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "af8b3989-88ee-42da-b2d1-14356ae71f88",
                            TwoFactorEnabled = false,
                            UserName = "guest@admin.com"
                        });
                });

            modelBuilder.Entity("CoStar.Models.HelpfulLink", b =>
                {
                    b.Property<int>("LinkId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("LinkDescription")
                        .IsRequired();

                    b.Property<string>("LinkUrl")
                        .IsRequired();

                    b.Property<string>("UserIdId");

                    b.HasKey("LinkId");

                    b.HasIndex("UserIdId");

                    b.ToTable("Links");

                    b.HasData(
                        new
                        {
                            LinkId = 1,
                            LinkDescription = "JavaScript language Documentation",
                            LinkUrl = "https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference"
                        },
                        new
                        {
                            LinkId = 2,
                            LinkDescription = "C# language Documentation",
                            LinkUrl = "https://docs.microsoft.com/en-us/dotnet/csharp/"
                        },
                        new
                        {
                            LinkId = 3,
                            LinkDescription = "React - Getting Started",
                            LinkUrl = "https://reactjs.org/docs/getting-started.html"
                        });
                });

            modelBuilder.Entity("CoStar.Models.IntQuestion", b =>
                {
                    b.Property<int>("IntQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("IntQuestionDescription")
                        .IsRequired();

                    b.Property<string>("IntQuestionName")
                        .IsRequired();

                    b.Property<string>("UserIdId");

                    b.HasKey("IntQuestionId");

                    b.HasIndex("UserIdId");

                    b.ToTable("Questions");

                    b.HasData(
                        new
                        {
                            IntQuestionId = 1,
                            IntQuestionDescription = "Alert and Prompt.",
                            IntQuestionName = "What are the two types of pop-ups?"
                        },
                        new
                        {
                            IntQuestionId = 2,
                            IntQuestionDescription = "Content can be replaced anywhere.",
                            IntQuestionName = "What is the disadvantage of using : 'innerHTML'?"
                        },
                        new
                        {
                            IntQuestionId = 3,
                            IntQuestionDescription = "var is function-scoped and let is block-scoped.",
                            IntQuestionName = "What is the difference between var and let?"
                        },
                        new
                        {
                            IntQuestionId = 4,
                            IntQuestionDescription = "The first option == checks value equality, whereas === returns false, and checks both type and value equality.",
                            IntQuestionName = "What is the difference between '==' and '==='?"
                        });
                });

            modelBuilder.Entity("CoStar.Models.Principle", b =>
                {
                    b.Property<int>("PrincipleId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("PrincipleDescription")
                        .IsRequired();

                    b.Property<string>("PrincipleImage");

                    b.Property<string>("PrincipleName")
                        .IsRequired();

                    b.Property<string>("UserIdId");

                    b.HasKey("PrincipleId");

                    b.HasIndex("UserIdId");

                    b.ToTable("Principles");

                    b.HasData(
                        new
                        {
                            PrincipleId = 1,
                            PrincipleDescription = "SOLID is an acronym for the first five object-oriented design(OOD) principles by Robert C. Martin. These principles, when combined together, make it easy for a programmer to develop software that are easy to maintain and extend, and are also a part of agile, an adaptive software development principle. [S]ingle Responsibility Principle, [O]pen/ Closed Principle, [L]iskov Substitution Principle, [I]ntegration Segregation Principle, [D]ependency Inversion Principle",
                            PrincipleImage = "../wwwroot/Images/SOLID_Img.png",
                            PrincipleName = "S.O.L.I.D."
                        },
                        new
                        {
                            PrincipleId = 2,
                            PrincipleDescription = "Object Oriented Programming(OOP) is a language model that is organized around objects rather than actions and data rather than logic. There are four pillars of OOP: Abstraction, Polymorphism, Inheritance, and Encapsulation. You can remember this mnemonic device - A.P.I.E., because pie is awesome!",
                            PrincipleImage = "../wwwroot/Images/OOP_Img.png",
                            PrincipleName = "O.O.P."
                        },
                        new
                        {
                            PrincipleId = 3,
                            PrincipleDescription = "There are four values derived from the Agile Manifesto: Individuals and Interactions Over Processes and Tools, Working Software Over Comprehensive Documentation, Customer Collaboration Over Contract Negotiation, Responding to Change Over Following a Plan.",
                            PrincipleImage = "../wwwroot/Images/AGILE_Img.png",
                            PrincipleName = "Agile"
                        });
                });

            modelBuilder.Entity("CoStar.Models.Whiteboard", b =>
                {
                    b.Property<int>("WhiteboardId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("UserIdId");

                    b.Property<string>("WhiteboardDescription")
                        .IsRequired();

                    b.Property<string>("WhiteboardImage");

                    b.Property<string>("WhiteboardName")
                        .IsRequired();

                    b.HasKey("WhiteboardId");

                    b.HasIndex("UserIdId");

                    b.ToTable("Whiteboards");

                    b.HasData(
                        new
                        {
                            WhiteboardId = 1,
                            WhiteboardDescription = "Find the median of two sorted arrays.",
                            WhiteboardImage = "../wwwroot/Images/MedianArrays_Img.png",
                            WhiteboardName = "Median of Arrays"
                        },
                        new
                        {
                            WhiteboardId = 2,
                            WhiteboardDescription = "Write a program that prints the numbers from 1 to 100 (here I have only written it for 1 to 15). But for multiples of three print 'Fizz' instead of the number and for the multiples of five print 'Buzz'. For numbers which are multiples of both three and five print 'FizzBuzz'.",
                            WhiteboardImage = "../wwwroot/Images/FizzBuzz_Img.png",
                            WhiteboardName = "Fizz Buzz"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CoStar.Models.HelpfulLink", b =>
                {
                    b.HasOne("CoStar.Models.ApplicationUser", "UserId")
                        .WithMany("HelpfulLinks")
                        .HasForeignKey("UserIdId");
                });

            modelBuilder.Entity("CoStar.Models.IntQuestion", b =>
                {
                    b.HasOne("CoStar.Models.ApplicationUser", "UserId")
                        .WithMany("IntQuestions")
                        .HasForeignKey("UserIdId");
                });

            modelBuilder.Entity("CoStar.Models.Principle", b =>
                {
                    b.HasOne("CoStar.Models.ApplicationUser", "UserId")
                        .WithMany("Principles")
                        .HasForeignKey("UserIdId");
                });

            modelBuilder.Entity("CoStar.Models.Whiteboard", b =>
                {
                    b.HasOne("CoStar.Models.ApplicationUser", "UserId")
                        .WithMany("Whiteboards")
                        .HasForeignKey("UserIdId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CoStar.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CoStar.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("CoStar.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CoStar.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
